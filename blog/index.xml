<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on uzluisf</title>
    <link>https://uzluisf.github.io/blog/</link>
    <description>Recent content in Blog on uzluisf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 22 Aug 2015 06:42:21 -0700</lastBuildDate><atom:link href="https://uzluisf.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deploy hugo site with Github Actions</title>
      <link>https://uzluisf.github.io/blog/deploy-hugo-site-with-github-actions/</link>
      <pubDate>Sat, 08 Apr 2023 19:15:39 -0400</pubDate>
      
      <guid>https://uzluisf.github.io/blog/deploy-hugo-site-with-github-actions/</guid>
      <description>Two Repositories uzluisf/uzluisf-site &amp;ndash; stores the site&amp;rsquo;s source code that will be used to generate the HTML with Hugo. We&amp;rsquo;ll call this the source repository.
uzluisf/uzluisf.github.io &amp;ndash; stores the HTML which is served through Github Pages. I&amp;rsquo;m using the domain provided by Github. We&amp;rsquo;ll call this the target repository.
Generating the SSH key pairs Source repository Target repository </description>
    </item>
    
    <item>
      <title>NodeJS to Raku - Buffers</title>
      <link>https://uzluisf.github.io/blog/buffers-nodejs-raku/</link>
      <pubDate>Wed, 15 Mar 2023 17:09:14 -0500</pubDate>
      
      <guid>https://uzluisf.github.io/blog/buffers-nodejs-raku/</guid>
      <description>NodeJS handles raw binary data with the classes Buffer and Blob, while Raku does so with the roles Buf and Blob, which are mutable and immutable buffers respectively. In Raku, a Buf composes a Blob so all Blob methods are available to Buf objects.
The following table summarizes the similarities and differences between buffer constructs in NodeJS and Raku:
NodeJS Raku Buffer/Buf Fixed-length sequence of bytes (No methods such as push, pop, etc.</description>
    </item>
    
    <item>
      <title>Containers in Raku</title>
      <link>https://uzluisf.github.io/blog/containers-in-raku/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://uzluisf.github.io/blog/containers-in-raku/</guid>
      <description>In programming languages, a variable is a way of associating a particular value with a name known to the compiler. For instance, take the variable declaration with its assignment, my $x = &amp;quot;Hello&amp;quot;. This associates the value 42 with the name $x and while this is true for most intents and purposes, this isn&amp;rsquo;t the entire story in Raku.
In Raku, when the compiler encounters the variable declaration my $x, the compiler registers it in some internal symbol table.</description>
    </item>
    
    <item>
      <title>With a new name</title>
      <link>https://uzluisf.github.io/blog/with-a-new-name/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://uzluisf.github.io/blog/with-a-new-name/</guid>
      <description>Back on October 2019, the programming language formerly known as Perl 6 was officially renamed to Raku. With the rename many things needed to be updated to match the language&amp;rsquo;s shiny new name (e.g., executables, extensions, documentation, etc.) and this included the Spanish translation of Laurent Rosenfeld&amp;rsquo;s Think Raku, an introduction to Computer Science and programming using Raku.
The Spanish translation is titled Piensa en Raku and can be found at https://uzluisf.</description>
    </item>
    
    <item>
      <title>Instance Attributes in Raku</title>
      <link>https://uzluisf.github.io/blog/instance-attributes-in-raku/</link>
      <pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://uzluisf.github.io/blog/instance-attributes-in-raku/</guid>
      <description>In Raku, an object&amp;rsquo;s methods are fully accessible by default but its data (as attributes) cannot be accessed directly outside the class unless explicitly specified. In order to access the data from outside for reading, writing or both, you must make it public somehow. What level of access you allow to an object&amp;rsquo;s data will mostly depend on the way you declare its attributes.
The $! twigil Let&amp;rsquo;s start with a simple example of a Raku class definition:</description>
    </item>
    
    <item>
      <title>Syncing Your Tasks with fruux and Tasks</title>
      <link>https://uzluisf.github.io/blog/syncing-your-tasks-with-fruux-and-tasks/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://uzluisf.github.io/blog/syncing-your-tasks-with-fruux-and-tasks/</guid>
      <description>Recently I came across Tasks, an Android app that lets you manage tasks (ta-da!). While I&amp;rsquo;ve been using the app to write down simple tasks, I&amp;rsquo;ve always wished that the tasks could be synced. Thus I was quite surprised when I learned that the app is compatible with CalDAV servers and thus allows you to sync your tasks with any service that uses CalDav, an open standard that provides client access to schedule information on a remote server.</description>
    </item>
    
    <item>
      <title>A Naive Introduction to Object Orientation in Perl 6</title>
      <link>https://uzluisf.github.io/blog/a-naive-introduction-to-object-orientation-in-perl-6/</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://uzluisf.github.io/blog/a-naive-introduction-to-object-orientation-in-perl-6/</guid>
      <description>Note: In October 2019, Perl 6 was renamed to Raku. Whenever you come across Perl 6, replace it with Raku. Learn more about the path to Raku.
Preamble Introduction This tutorial will at most concern itself with the basic of object oriented programming (OOP) in Perl 6. As result, it&amp;rsquo;s important that you have a basic understanding of statements/expressions, variables, conditionals, loops, subroutines (functions), etc., which if not in Perl 6, at least in another programming language.</description>
    </item>
    
    <item>
      <title>Perl 6 code in rmarkdown</title>
      <link>https://uzluisf.github.io/blog/perl-6-code-in-rmarkdown/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://uzluisf.github.io/blog/perl-6-code-in-rmarkdown/</guid>
      <description>Note: In October 2019, Perl 6 was renamed to Raku. Whenever you come across Perl 6, replace it with Raku. Learn more about the path to Raku.
Installation First, start off by installing the R programming language. After this, run R and execute the following command to install rmarkdown: install.packages(&amp;quot;rmarkdown&amp;quot;). While installing rmarkdown, I got the following error message:
Error: .onLoad failed in loadNamespace() for &amp;#39;tcltk&amp;#39;, details: call: dyn.load(file, DLLpath = DLLpath, .</description>
    </item>
    
    <item>
      <title>Command Line Arguments in PerlÂ 6</title>
      <link>https://uzluisf.github.io/blog/command-line-arguments-in-perl-6/</link>
      <pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://uzluisf.github.io/blog/command-line-arguments-in-perl-6/</guid>
      <description>Note: In October 2019, Perl 6 was renamed to Raku. Whenever you come across Perl 6, replace it with Raku. Learn more about the path to Raku.
sub MAIN In Perl 6, the parsing of command line arguments is done with the MAIN subroutine which is a special subroutine that parses command line arguments based on their signatures. As with other subroutines, you can have named and positional parameters, optional (and required) parameters, multiple dispatch, etc.</description>
    </item>
    
  </channel>
</rss>
